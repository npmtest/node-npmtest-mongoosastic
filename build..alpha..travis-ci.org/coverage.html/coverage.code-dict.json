{"/home/travis/build/npmtest/node-npmtest-mongoosastic/test.js":"/* istanbul instrument in package npmtest_mongoosastic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoosastic/lib.npmtest_mongoosastic.js":"/* istanbul instrument in package npmtest_mongoosastic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongoosastic = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongoosastic = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoosastic/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongoosastic && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongoosastic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongoosastic\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongoosastic.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mongoosastic.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongoosastic.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mongoosastic.__dirname + '/lib.npmtest_mongoosastic.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoosastic/node_modules/mongoosastic/lib/mongoosastic.js":"'use strict'\n\nconst elasticsearch = require('elasticsearch')\nconst Generator = require('./mapping-generator')\nconst generator = new Generator()\nconst serialize = require('./serialize')\nconst events = require('events')\nconst util = require('util')\nconst nop = function nop () {}\n\nfunction isString (subject) {\n  return typeof subject === 'string'\n}\n\nfunction isStringArray (arr) {\n  return arr.filter && arr.length === (arr.filter(item => typeof item === 'string')).length\n}\n\nfunction getMapping (schema) {\n  let retMapping = {}\n  generator.generateMapping(schema, (err, mapping) => {\n    if (err) {\n      // no handling needed\n    }\n    retMapping = mapping\n  })\n\n  return retMapping\n}\n\nfunction createEsClient (options) {\n  const esOptions = {}\n\n  if (util.isArray(options.hosts)) {\n    esOptions.host = options.hosts\n  } else {\n    esOptions.host = {\n      host: options && options.host ? options.host : 'localhost',\n      port: options && options.port ? options.port : 9200,\n      protocol: options && options.protocol ? options.protocol : 'http',\n      auth: options && options.auth ? options.auth : null,\n      keepAlive: false\n    }\n  }\n\n  esOptions.log = (options ? options.log : null)\n\n  return new elasticsearch.Client(esOptions)\n}\n\nfunction createMappingIfNotPresent (options, cb) {\n  const client = options.client\n  const indexName = options.indexName\n  const typeName = options.typeName\n  const schema = options.schema\n  const settings = options.settings\n  const properties = options.properties\n\n  generator.generateMapping(schema, (ignoredErr, mapping) => {\n    const completeMapping = {}\n    completeMapping[typeName] = mapping\n\n    if (properties) {\n      Object.keys(properties).map(key => {\n        completeMapping[typeName].properties[key] = properties[key]\n      })\n    }\n\n    client.indices.exists({\n      index: indexName\n    }, (err, exists) => {\n      if (err) {\n        return cb(err)\n      }\n\n      if (exists) {\n        return client.indices.putMapping({\n          index: indexName,\n          type: typeName,\n          body: completeMapping\n        }, cb)\n      }\n      return client.indices.create({\n        index: indexName,\n        body: settings\n      }, indexErr => {\n        if (indexErr) {\n          return cb(indexErr)\n        }\n\n        client.indices.putMapping({\n          index: indexName,\n          type: typeName,\n          body: completeMapping\n        }, cb)\n      })\n    })\n  })\n}\n\nfunction hydrate (res, model, options, cb) {\n  const results = res.hits\n  const resultsMap = {}\n  const ids = results.hits.map((result, idx) => {\n    resultsMap[result._id] = idx\n    return result._id\n  })\n\n  const query = model.find({\n    _id: {\n      $in: ids\n    }\n  })\n  const hydrateOptions = options.hydrateOptions\n\n  // Build Mongoose query based on hydrate options\n  // Example: {lean: true, sort: '-name', select: 'address name'}\n  Object.keys(hydrateOptions).forEach(option => {\n    query[option](hydrateOptions[option])\n  })\n\n  query.exec((err, docs) => {\n    let hits\n    let docsMap = {}\n\n    if (err) {\n      return cb(err)\n    }\n\n    if (!docs || docs.length === 0) {\n      results.hits = []\n      res.hits = results\n      return cb(null, res)\n    }\n\n    if (hydrateOptions.sort) {\n      // Hydrate sort has precedence over ES result order\n      hits = docs\n    } else {\n      // Preserve ES result ordering\n      docs.forEach(doc => {\n        docsMap[doc._id] = doc\n      })\n      hits = results.hits.map(result => docsMap[result._id])\n    }\n\n    if (options.highlight || options.hydrateWithESResults) {\n      hits.forEach(doc => {\n        const idx = resultsMap[doc._id]\n        if (options.highlight) {\n          doc._highlight = results.hits[idx].highlight\n        }\n        if (options.hydrateWithESResults) {\n          // Add to doc ES raw result (with, e.g., _score value)\n          doc._esResult = results.hits[idx]\n          if (!options.hydrateWithESResults.source) {\n            // Remove heavy load\n            delete doc._esResult._source\n          }\n        }\n      })\n    }\n\n    results.hits = hits\n    res.hits = results\n    cb(null, res)\n  })\n}\n\nfunction deleteByMongoId (options, cb) {\n  const index = options.index\n  const type = options.type\n  const client = options.client\n  const model = options.model\n  const routing = options.routing\n  let tries = options.tries\n\n  client.delete({\n    index: index,\n    type: type,\n    id: model._id.toString(),\n    routing: routing\n  }, (err, res) => {\n    if (err && err.status === 404) {\n      if (tries <= 0) {\n        model.emit('es-removed', err, res)\n        return cb(err)\n      }\n      options.tries = --tries\n      setTimeout(() => {\n        deleteByMongoId(options, cb)\n      }, 500)\n    } else {\n      model.emit('es-removed', err, res)\n      cb(err)\n    }\n  })\n}\n\nfunction Mongoosastic (schema, pluginOpts) {\n  let options = pluginOpts || {}\n\n  let bulkTimeout\n  let bulkBuffer = []\n  let esClient\n  let populate = options && options.populate\n  let mapping = getMapping(schema)\n\n  let indexName = options && options.index\n  let typeName = options && options.type\n  let alwaysHydrate = options && options.hydrate\n  let defaultHydrateOptions = options && options.hydrateOptions\n  let bulk = options && options.bulk\n  let filter = options && options.filter\n  let transform = options && options.transform\n  let routing = options && options.routing\n\n  let customProperties = options && options.customProperties\n  let customSerialize = options && options.customSerialize\n  let indexAutomatically = !(options && options.indexAutomatically === false)\n  let saveOnSynchronize = !(options && options.saveOnSynchronize === false)\n\n  if (options.esClient) {\n    esClient = options.esClient\n  } else {\n    esClient = createEsClient(options)\n  }\n\n  function setIndexNameIfUnset (model) {\n    const modelName = model.toLowerCase()\n    if (!indexName) {\n      indexName = `${modelName}s`\n    }\n\n    if (!typeName) {\n      typeName = modelName\n    }\n  }\n\n  function postSave (doc) {\n    let _doc\n    function onIndex (err, res) {\n      if (!filter || !filter(doc)) {\n        doc.emit('es-indexed', err, res)\n      } else {\n        doc.emit('es-filtered', err, res)\n      }\n    }\n\n    if (doc) {\n      _doc = new doc.constructor(doc)\n      if (populate && populate.length) {\n        populate.forEach(populateOpts => {\n          _doc.populate(populateOpts)\n        })\n        _doc.execPopulate().then(popDoc => {\n          popDoc.index(onIndex)\n        }).catch(onIndex)\n      } else {\n        _doc.index(onIndex)\n      }\n    }\n  }\n\n  function clearBulkTimeout () {\n    clearTimeout(bulkTimeout)\n    bulkTimeout = undefined\n  }\n\n  function bulkAdd (instruction) {\n    bulkBuffer.push(instruction)\n\n    // Return because we need the doc being indexed\n    // Before we start inserting\n    if (instruction.index && instruction.index._index) {\n      return\n    }\n\n    if (bulkBuffer.length >= ((bulk && bulk.size) || 1000)) {\n      schema.statics.flush()\n      clearBulkTimeout()\n    } else if (bulkTimeout === undefined) {\n      bulkTimeout = setTimeout(() => {\n        schema.statics.flush()\n        clearBulkTimeout()\n      }, (bulk && bulk.delay) || 1000)\n    }\n  }\n\n  function bulkDelete (opts, cb) {\n    bulkAdd({\n      delete: {\n        _index: opts.index || indexName,\n        _type: opts.type || typeName,\n        _id: opts.model._id.toString(),\n        _routing: opts.routing\n      }\n    })\n    cb()\n  }\n\n  function bulkIndex (opts) {\n    bulkAdd({\n      index: {\n        _index: opts.index || indexName,\n        _type: opts.type || typeName,\n        _id: opts._id.toString(),\n        _routing: opts.routing\n      }\n    })\n    bulkAdd(opts.model)\n  }\n\n  /**\n   * ElasticSearch Client\n   */\n  schema.statics.esClient = esClient\n\n  /**\n   * Create the mapping. Takes an optional settings parameter\n   * and a callback that will be called once the mapping is created\n\n   * @param settings Object (optional)\n   * @param cb Function\n   */\n  schema.statics.createMapping = function createMapping (inSettings, inCb) {\n    let cb = inCb\n    let settings = inSettings\n    if (arguments.length < 2) {\n      cb = inSettings || nop\n      settings = undefined\n    }\n\n    setIndexNameIfUnset(this.modelName)\n\n    createMappingIfNotPresent({\n      client: esClient,\n      indexName: indexName,\n      typeName: typeName,\n      schema: schema,\n      settings: settings,\n      properties: customProperties\n    }, cb)\n  }\n\n  /**\n   * @param options  Object (optional)\n   * @param cb Function\n   */\n  schema.methods.index = function schemaIndex (inOpts, inCb) {\n    let index\n    let type\n    let serialModel\n    let cb = inCb\n    let opts = inOpts\n    let _serialize = serialize\n\n    if (arguments.length < 2) {\n      cb = inOpts || nop\n      opts = {}\n    }\n\n    if (filter && filter(this)) {\n      return this.unIndex(cb)\n    }\n\n    if (typeof customSerialize === 'function') {\n      _serialize = customSerialize\n    }\n\n    setIndexNameIfUnset(this.constructor.modelName)\n\n    index = opts.index || indexName\n    type = opts.type || typeName\n\n    /**\n     * Serialize the model, and apply transformation\n     */\n    serialModel = _serialize(this, mapping)\n    if (transform) serialModel = transform(serialModel, this)\n\n    const _opts = {\n      index: index,\n      type: type\n    }\n    if (routing) {\n      _opts.routing = routing(this)\n    }\n\n    if (bulk) {\n      _opts.model = serialModel\n      _opts._id = this._id\n      bulkIndex(_opts)\n      setImmediate(() => cb(null, this))\n    } else {\n      _opts.id = this._id.toString()\n      _opts.body = serialModel\n      esClient.index(_opts, cb)\n    }\n  }\n\n  /**\n   * Unset elasticsearch index\n   * @param options - (optional) options for unIndex\n   * @param cb - callback when unIndex is complete\n   */\n  schema.methods.unIndex = function unIndex (inOpts, inCb) {\n    let opts = inOpts\n    let cb = inCb\n\n    if (arguments.length < 2) {\n      cb = inOpts || nop\n      opts = {}\n    }\n\n    setIndexNameIfUnset(this.constructor.modelName)\n\n    opts.index = opts.index || indexName\n    opts.type = opts.type || typeName\n    opts.model = this\n    opts.client = esClient\n    opts.tries = opts.tries || 3\n    if (routing) {\n      opts.routing = routing(this)\n    }\n\n    if (bulk) {\n      bulkDelete(opts, cb)\n    } else {\n      deleteByMongoId(opts, cb)\n    }\n  }\n\n  /**\n   * Delete all documents from a type/index\n   * @param options - (optional) specify index/type\n   * @param cb - callback when truncation is complete\n   */\n  schema.statics.esTruncate = function esTruncate (inOpts, inCb) {\n    let opts = inOpts\n    let cb = inCb\n    let esQuery\n\n    if (arguments.length < 2) {\n      cb = inOpts || nop\n      opts = {}\n    }\n\n    setIndexNameIfUnset(this.modelName)\n\n    opts.index = opts.index || indexName\n    opts.type = opts.type || typeName\n\n    esQuery = {\n      body: {\n        query: {\n          match_all: {}\n        }\n      },\n      index: opts.index,\n      type: opts.type\n    }\n\n    esClient.search(esQuery, (err, res) => {\n      if (err) {\n        return cb(err)\n      }\n      if (res.hits.total) {\n        res.hits.hits.forEach(doc => {\n          opts.model = doc\n          if (routing) {\n            doc._source._id = doc._id\n            opts.routing = routing(doc._source)\n          }\n          bulkDelete(opts, nop)\n        })\n      }\n      cb()\n    })\n  }\n\n  /**\n   * Synchronize an existing collection\n   *\n   * @param query - query for documents you want to synchronize\n   */\n  schema.statics.synchronize = function synchronize (inQuery, inOpts) {\n    let em = new events.EventEmitter()\n    let closeValues = []\n    let counter = 0\n    let stream\n    let query = inQuery || {}\n    let close = function close () {\n      em.emit.apply(em, ['close'].concat(closeValues))\n    }\n\n    let _saveOnSynchronize = inOpts &&\n      inOpts.saveOnSynchronize !== undefined ? inOpts.saveOnSynchronize : saveOnSynchronize\n\n    // Set indexing to be bulk when synchronizing to make synchronizing faster\n    // Set default values when not present\n    bulk = {\n      delay: bulk && bulk.delay || 1000,\n      size: bulk && bulk.size || 1000,\n      batch: bulk && bulk.batch || 50\n    }\n\n    setIndexNameIfUnset(this.modelName)\n\n    stream = this.find(query).batchSize(bulk.batch).cursor()\n\n    stream.on('data', doc => {\n      stream.pause()\n      counter++\n\n      function onIndex (indexErr, inDoc) {\n        counter--\n        if (indexErr) {\n          em.emit('error', indexErr)\n        } else {\n          em.emit('data', null, inDoc)\n        }\n        stream.resume()\n      }\n\n      doc.on('es-indexed', onIndex)\n      doc.on('es-filtered', onIndex)\n\n      if (_saveOnSynchronize) {\n        // Save document with Mongoose first\n        doc.save(err => {\n          if (err) {\n            em.emit('error', err)\n            return stream.resume()\n          }\n        })\n      } else {\n        postSave(doc)\n      }\n    })\n\n    stream.on('close', (pA, pB) => {\n      let closeInterval\n      closeValues = [pA, pB]\n      closeInterval = setInterval(() => {\n        if (counter === 0 && bulkBuffer.length === 0) {\n          clearInterval(closeInterval)\n          close()\n          bulk = options && options.bulk\n        }\n      }, 1000)\n    })\n\n    stream.on('error', err => {\n      em.emit('error', err)\n    })\n\n    return em\n  }\n\n  /**\n   * ElasticSearch search function\n   *\n   * Wrapping schema.statics.es_search().\n   *\n   * @param inQuery - query object to perform search with\n   * @param inOpts - (optional) special search options, such as hydrate\n   * @param inCb - callback called with search results\n   */\n  schema.statics.search = function search (inQuery, inOpts, inCb) {\n    let cb = inCb\n    let opts = inOpts\n    let query = inQuery === null ? undefined : inQuery\n    let esSearch\n    let fullQuery\n\n    if (arguments.length === 2) {\n      cb = arguments[1]\n      opts = {}\n    }\n\n    fullQuery = {\n      query: query\n    }\n\n    esSearch = schema.statics.esSearch.bind(this)\n\n    return esSearch(fullQuery, opts, cb)\n  }\n\n  /**\n   * ElasticSearch true/raw search function\n   *\n   * Elastic search query: provide full query object.\n   * Useful, e.g., for paged requests.\n   *\n   * @param inQuery - **full** query object to perform search with\n   * @param inOpts - (optional) special search options, such as hydrate\n   * @param inCb - callback called with search results\n     */\n  schema.statics.esSearch = function (inQuery, inOpts, inCb) {\n    let _this = this\n    let cb = inCb\n    let opts = inOpts\n    let esQuery\n    let query = inQuery === null ? undefined : inQuery\n\n    if (arguments.length === 2) {\n      cb = arguments[1]\n      opts = {}\n    }\n\n    opts.hydrateOptions = opts.hydrateOptions || defaultHydrateOptions || {}\n\n    setIndexNameIfUnset(this.modelName)\n\n    esQuery = {\n      body: query,\n      index: opts.index || indexName,\n      type: opts.type || typeName\n    }\n\n    if (opts.routing) {\n      esQuery.routing = opts.routing\n    }\n\n    if (opts.highlight) {\n      esQuery.body.highlight = opts.highlight\n    }\n\n    if (opts.suggest) {\n      esQuery.body.suggest = opts.suggest\n    }\n\n    if (opts.aggs) {\n      esQuery.body.aggs = opts.aggs\n    }\n\n    if (opts.min_score) {\n      esQuery.body.min_score = opts.min_score\n    }\n\n    Object.keys(opts).forEach(opt => {\n      if (!opt.match(/(hydrate|sort|aggs)/) && opts.hasOwnProperty(opt)) {\n        esQuery[opt] = opts[opt]\n      }\n\n      if (opts.sort) {\n        if (isString(opts.sort) || isStringArray(opts.sort)) {\n          esQuery.sort = opts.sort\n        } else {\n          esQuery.body.sort = opts.sort\n        }\n      }\n    })\n\n    esClient.search(esQuery, (err, res) => {\n      if (err) {\n        return cb(err)\n      }\n\n      if (alwaysHydrate || opts.hydrate) {\n        hydrate(res, _this, opts, cb)\n      } else {\n        cb(null, res)\n      }\n    })\n  }\n\n  schema.statics.esCount = function esCount (inQuery, inCb) {\n    let cb = inCb\n    let query = inQuery\n    let esQuery\n\n    setIndexNameIfUnset(this.modelName)\n\n    if (!cb && typeof query === 'function') {\n      cb = query\n      query = {\n        match_all: {}\n      }\n    }\n\n    esQuery = {\n      body: {\n        query: query\n      },\n      index: indexName,\n      type: typeName\n    }\n\n    esClient.count(esQuery, cb)\n  }\n\n  schema.statics.flush = function flush (inCb) {\n    let cb = inCb || nop\n\n    esClient.bulk({\n      body: bulkBuffer\n    }, cb)\n\n    bulkBuffer = []\n  }\n\n  schema.statics.refresh = function refresh (inOpts, inCb) {\n    let cb = inCb\n    let opts = inOpts\n    if (arguments.length < 2) {\n      cb = inOpts || nop\n      opts = {}\n    }\n\n    setIndexNameIfUnset(this.modelName)\n    esClient.indices.refresh({\n      index: opts.index || indexName\n    }, cb)\n  }\n\n  function postRemove (doc) {\n    if (!doc) {\n      return\n    }\n\n    const opts = {\n      index: indexName,\n      type: typeName,\n      tries: 3,\n      model: doc,\n      client: esClient\n    }\n    if (routing) {\n      opts.routing = routing(doc)\n    }\n\n    setIndexNameIfUnset(doc.constructor.modelName)\n\n    if (bulk) {\n      bulkDelete(opts, nop)\n    } else {\n      deleteByMongoId(opts, nop)\n    }\n  }\n\n  /**\n   * Use standard Mongoose Middleware hooks\n   * to persist to Elasticsearch\n   */\n  function setUpMiddlewareHooks (inSchema) {\n    /**\n     * Remove in elasticsearch on remove\n     */\n    inSchema.post('remove', postRemove)\n    inSchema.post('findOneAndRemove', postRemove)\n\n    /**\n     * Save in elasticsearch on save.\n     */\n    inSchema.post('save', postSave)\n    inSchema.post('findOneAndUpdate', postSave)\n    inSchema.post('insertMany', (docs) => {\n      docs.forEach((doc) => postSave(doc))\n    })\n  }\n\n  if (indexAutomatically) {\n    setUpMiddlewareHooks(schema)\n  }\n}\n\nmodule.exports = Mongoosastic\n","/home/travis/build/npmtest/node-npmtest-mongoosastic/node_modules/mongoosastic/lib/mapping-generator.js":"'use strict'\n\nconst cloneDeep = require('lodash.clonedeep')\n\n//\n// Get type from the mongoose schema\n//\n// Returns the type, so in case none is set, it's the mongoose type.\n//\n// @param paths\n// @param field\n// @return the type or false\n//\nfunction getTypeFromPaths (paths, field) {\n  let type = false\n\n  if (paths[field] && paths[field].options.type === Date) {\n    return 'date'\n  }\n\n  if (paths[field] && paths[field].options.type === Boolean) {\n    return 'boolean'\n  }\n\n  if (paths[field]) {\n    type = paths[field].instance ? paths[field].instance.toLowerCase() : 'object'\n  }\n\n  return type\n}\n\n//\n// Generates the mapping\n//\n// Can be called recursively.\n//\n// @param cleanTree\n// @param inPrefix\n// @return the mapping\n//\nfunction getMapping (cleanTree, inPrefix) {\n  let mapping = {}\n  let value = []\n  let field = []\n  let prop = []\n  let implicitFields = []\n  let hasEsIndex = false\n  const prefix = inPrefix !== '' ? `${inPrefix}.` : inPrefix\n\n  for (field in cleanTree) {\n    if (!cleanTree.hasOwnProperty(field)) {\n      continue\n    }\n    value = cleanTree[field]\n    mapping[field] = {}\n    mapping[field].type = value.type\n\n    // Check if field was explicity indexed, if not keep track implicitly\n    if (value.es_indexed) {\n      hasEsIndex = true\n    } else if (value.type) {\n      implicitFields.push(field)\n    }\n\n    // If there is no type, then it's an object with subfields.\n    if (typeof value === 'object' && !value.type) {\n      mapping[field].type = 'object'\n      mapping[field].properties = getMapping(value, prefix + field)\n    }\n\n    // If it is a objectid make it a string.\n    if (value.type === 'objectid') {\n      if (value.ref && value.es_schema) {\n        mapping[field].type = 'object'\n        mapping[field].properties = getMapping(value, prefix + field)\n        continue\n      }\n      // do not continue here so we can handle other es_ options\n      mapping[field].type = 'string'\n    }\n\n    // If indexing a number, and no es_type specified, default to double\n    if (value.type === 'number' && value.es_type === undefined) {\n      mapping[field].type = 'double'\n      continue\n    }\n\n    // Else, it has a type and we want to map that!\n    for (prop in value) {\n      // Map to field if it's an Elasticsearch option\n      if (value.hasOwnProperty(prop) && prop.indexOf('es_') === 0 && prop !== 'es_indexed') {\n        mapping[field][prop.replace(/^es_/, '')] = value[prop]\n      }\n    }\n\n    // if type is never mapped, delete mapping\n    if (mapping[field].type === undefined) {\n      delete mapping[field]\n    }\n  }\n\n  // If one of the fields was explicitly indexed, delete all implicit fields\n  if (hasEsIndex) {\n    implicitFields.forEach(implicitField => {\n      delete mapping[implicitField]\n    })\n  }\n\n  return mapping\n}\n\n//\n// Generates a clean tree\n//\n// Can be called recursively.\n//\n// @param tree\n// @param paths\n// @param prefix\n// @return the tree\n//\nfunction getCleanTree (tree, paths, inPrefix) {\n  let cleanTree = {}\n  let type = ''\n  let value = {}\n  let field\n  let prop\n  let treeNode\n  let subTree\n  let key\n  let geoFound = false\n  let prefix = inPrefix !== '' ? `${inPrefix}.` : inPrefix\n\n  tree = cloneDeep(tree)\n  paths = cloneDeep(paths)\n\n  for (field in tree) {\n    if (prefix === '' && field === '_id') {\n      continue\n    }\n\n    type = getTypeFromPaths(paths, prefix + field)\n    value = tree[field]\n\n    if (value.es_indexed === false) {\n      continue\n    }\n\n    // Field has some kind of type\n    if (type) {\n      // If it is an nested schema\n      if (value[0] || type === 'embedded') {\n        // A nested array can contain complex objects\n        nestedSchema(paths, field, cleanTree, value, prefix) // eslint-disable-line no-use-before-define\n      } else if (value.type && Array.isArray(value.type)) {\n        // An object with a nested array\n        nestedSchema(paths, field, cleanTree, value, prefix) // eslint-disable-line no-use-before-define\n        // Merge top level es settings\n        for (prop in value) {\n          // Map to field if it's an Elasticsearch option\n          if (value.hasOwnProperty(prop) && prop.indexOf('es_') === 0) {\n            cleanTree[field][prop] = value[prop]\n          }\n        }\n      } else if (paths[field] && paths[field].options.es_schema && paths[field].options.es_schema.tree && paths[field].options.es_schema.paths) {\n        subTree = paths[field].options.es_schema.tree\n        if (paths[field].options.es_select) {\n          for (treeNode in subTree) {\n            if (!subTree.hasOwnProperty(treeNode)) { continue }\n            if (paths[field].options.es_select.split(' ').indexOf(treeNode) === -1) {\n              delete subTree[treeNode]\n            }\n          }\n        }\n        cleanTree[field] = getCleanTree(subTree, paths[field].options.es_schema.paths, '')\n      } else if (value === String || value === Object || value === Date || value === Number || value === Boolean || value === Array) {\n        cleanTree[field] = {}\n        cleanTree[field].type = type\n      } else {\n        cleanTree[field] = {}\n        for (key in value) {\n          if (value.hasOwnProperty(key)) {\n            cleanTree[field][key] = value[key]\n          }\n        }\n        cleanTree[field].type = type\n      }\n\n      // It has no type for some reason\n    } else {\n      // Because it is an geo_* object!!\n      if (typeof value === 'object') {\n        for (key in value) {\n          if (value.hasOwnProperty(key) && /^geo_/.test(key)) {\n            cleanTree[field] = value[key]\n            geoFound = true\n          }\n        }\n\n        if (geoFound) {\n          continue\n        }\n      }\n\n      // If it's a virtual type, don't map it\n      if (typeof value === 'object' && value.getters && value.setters && value.options) {\n        continue\n      }\n\n      // Because it is some other object!! Or we assumed that it is one.\n      if (typeof value === 'object') {\n        cleanTree[field] = getCleanTree(value, paths, prefix + field)\n      }\n    }\n  }\n\n  return cleanTree\n}\n\n//\n// Define a nested schema\n//\n// @param paths\n// @param field\n// @param cleanTree\n// @param value\n// @param prefix\n// @return cleanTree modified\n//\nfunction nestedSchema (paths, field, cleanTree, value, prefix) {\n  let treeNode\n  let subTree\n  // A nested array can contain complex objects\n  if (paths[prefix + field] && paths[prefix + field].schema && paths[prefix + field].schema.tree && paths[prefix + field].schema.paths) {\n    cleanTree[field] = getCleanTree(paths[prefix + field].schema.tree, paths[prefix + field].schema.paths, '')\n  } else if (paths[prefix + field] && Array.isArray(paths[prefix + field].options.type) && paths[prefix + field].options.type[0].es_schema &&\n    paths[prefix + field].options.type[0].es_schema.tree && paths[prefix + field].options.type[0].es_schema.paths) {\n    // A nested array of references filtered by the 'es_select' option\n    subTree = paths[field].options.type[0].es_schema.tree\n    if (paths[field].options.type[0].es_select) {\n      for (treeNode in subTree) {\n        if (!subTree.hasOwnProperty(treeNode)) {\n          continue\n        }\n        if (paths[field].options.type[0].es_select.split(' ').indexOf(treeNode) === -1) {\n          delete subTree[treeNode]\n        }\n      }\n    }\n    cleanTree[field] = getCleanTree(subTree, paths[prefix + field].options.type[0].es_schema.paths, '')\n  } else if (paths[prefix + field] && paths[prefix + field].caster && paths[prefix + field].caster.instance) {\n    // Even for simple types the value can be an object if there is other attributes than type\n    if (typeof value[0] === 'object') {\n      cleanTree[field] = value[0]\n    } else {\n      cleanTree[field] = {}\n    }\n\n    cleanTree[field].type = paths[prefix + field].caster.instance.toLowerCase()\n  } else if (!paths[field] && prefix) {\n    if (paths[prefix + field] && paths[prefix + field].caster && paths[prefix + field].caster.instance) {\n      cleanTree[field] = {\n        type: paths[prefix + field].caster.instance.toLowerCase()\n      }\n    }\n  } else {\n    cleanTree[field] = {\n      type: 'object'\n    }\n  }\n}\n\nfunction Generator () {}\n\nGenerator.prototype.generateMapping = function generateMapping (schema, cb) {\n  const cleanTree = getCleanTree(schema.tree, schema.paths, '')\n  delete cleanTree[schema.get('versionKey')]\n  let mapping = getMapping(cleanTree, '')\n  cb(null, {\n    properties: mapping\n  })\n}\n\nmodule.exports = Generator\n","/home/travis/build/npmtest/node-npmtest-mongoosastic/node_modules/mongoosastic/lib/serialize.js":"'use strict'\n\nmodule.exports = function serialize (model, mapping) {\n  let name, outModel\n\n  function _serializeObject (object, mappingData) {\n    let serialized = {}\n    let field\n    let val\n    for (field in mappingData.properties) {\n      if (mappingData.properties.hasOwnProperty(field)) {\n        val = serialize.call(object, object[field], mappingData.properties[field])\n        if (val !== undefined) {\n          serialized[field] = val\n        }\n      }\n    }\n    return serialized\n  }\n\n  if (mapping.properties && model) {\n    if (Array.isArray(model)) {\n      return model.map(object => _serializeObject(object, mapping))\n    }\n\n    return _serializeObject(model, mapping)\n  }\n\n  if (mapping.cast && typeof mapping.cast !== 'function') {\n    throw new Error('es_cast must be a function')\n  }\n\n  outModel = mapping.cast ? mapping.cast.call(this, model) : model\n  if (typeof outModel === 'object' && outModel !== null) {\n    name = outModel.constructor.name\n    if (name === 'ObjectID') {\n      return outModel.toString()\n    }\n\n    if (name === 'Date') {\n      return new Date(outModel).toJSON()\n    }\n  }\n\n  return outModel\n}\n"}